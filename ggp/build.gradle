/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'andri' at '2/26/16 12:40 PM' with Gradle 2.11
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.11/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
plugins {
    id "com.scuilion.syntastic" version "0.3.6-java7"
}
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.14'
    compile fileTree(dir: 'lib', include: ['*.jar'])


    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

def playerJvmArgs = [
        '-Xmx1500m', //Gives players a max heap size of 1500 MB
        '-server',
        '-XX:-DontCompileHugeMethods',
        '-XX:MinHeapFreeRatio=10',
        '-XX:MaxHeapFreeRatio=10']

//See playerRunner.sh
task playerRunner(type: JavaExec) {
    main = 'org.ggp.base.apps.player.PlayerRunner'
    classpath = sourceSets.main.runtimeClasspath
    //These can be set on the command line with
    //-Pport=9147 and -Pgamer=RandomGamer as arguments.
    doFirst {
        args = [port, gamer]
    }
    jvmArgs = playerJvmArgs
}

task jeffRunner(type: JavaExec) {
    main = 'org.ggp.base.apps.player.JeffRunner'
    classpath = sourceSets.main.runtimeClasspath
    //These can be set on the command line with
    //-Pport=9147 and -Pgamer=RandomGamer as arguments.
    doFirst {
        args = [port]
    }
    jvmArgs = playerJvmArgs
}

task kiosk(type: JavaExec) {
    main = 'org.ggp.base.apps.kiosk.Kiosk'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = playerJvmArgs
}

task server(type: JavaExec) {
    main = 'org.ggp.base.apps.server.Server'
    classpath = sourceSets.main.runtimeClasspath
}

task simpleGameSim(type: JavaExec) {
    main = 'org.ggp.base.apps.utilities.SimpleGameSim'
    classpath = sourceSets.main.runtimeClasspath
}

task tiltyardRequestFarm(type: JavaExec) {
    main = 'org.ggp.base.apps.tiltyard.TiltyardRequestFarm'
    classpath = sourceSets.main.runtimeClasspath
}

task player(type: JavaExec) {
    main = 'org.ggp.base.apps.player.Player'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = playerJvmArgs
}

